name: Release

on:
  workflow_dispatch:
    inputs:
      bump-level:
        type: choice
        options: [major, minor, patch]
        required: true
        default: patch
        description: "The level of version bump to apply"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Read and Set Version
        id: read-version
        env:
          BUMP_LEVEL: ${{ github.event.inputs.bump-level }}
        run: |
          # get version
          sudo apt install libxml2-utils
          version=$(xmllint --xpath "string(//package/metadata/version)" RapidEnum.NuGet/RapidEnum.nuspec)

          # bump version
          IFS='.' read -ra tokens <<< "${version:-0.0.0}"
          major="${tokens[0]}"
          minor="${tokens[1]}"
          patch="${tokens[2]}"
          case "${BUMP_LEVEL}" in
            major) major="$((major + 1))"; minor=0; patch=0 ;;
            minor) minor="$((minor + 1))"; patch=0 ;;
            patch) patch="$((patch + 1))" ;;
          esac

          new_version="${major}.${minor}.${patch}"
          echo "version=${new_version}" | tee -a "${GITHUB_OUTPUT}"
      - name: Update nuspec version
        run: |
          sed -i "s/<version>.*<\/version>/<version>${{ steps.read-version.outputs.version }}<\/version>/" RapidEnum.NuGet/RapidEnum.nuspec
      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.read-version.outputs.version }}"
          jq --arg new_version "$NEW_VERSION" '.version = $new_version' RapidEnum.Unity/Packages/com.hanachiru.rapidenum/package.json > tmp.$$.json && mv tmp.$$.json RapidEnum.Unity/Packages/com.hanachiru.rapidenum/package.json
      - name: Commit and Push to Main
        shell: bash
        env:
          VERSION: ${{ steps.read-version.outputs.version }}
        run: |
          git config user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git add -f RapidEnum.NuGet/RapidEnum.nuspec
          git add -f RapidEnum.Unity/Packages/com.hanachiru.rapidenum/package.json
          message="Update v${VERSION}"
          git commit -m "${message}"
          git push
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Install dependencies
        run: dotnet restore
        working-directory: .
      - name: Build
        run: dotnet build RapidEnum.sln --no-restore -c Release
      - name: Pack
        run: dotnet pack ./RapidEnum.NuGet/RapidEnum.NuGet.csproj --no-build -c Release -o ./RapidEnum.NuGet
      - name: Publish to NuGet
        working-directory: ./RapidEnum.NuGet
        env:
          VERSION: ${{ steps.read-version.outputs.version }}
        run: |
          dotnet nuget push "RapidEnum.${VERSION}.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
      - uses: release-drafter/release-drafter@v6
        id: release-drafter
        with:
          publish: true
          commitish: main
          tag: v${{ steps.read-version.outputs.version }}
          name: v${{ steps.read-version.outputs.version }}
          version: ${{ steps.read-version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
